Beginning after Thanksgiving break, I started to shift my focus primarily towards working on the garage/customization system for our game. I started this by figuring out a way to store all of the values for our mech parts, and my initial plan was to use classes. Everything started out by being a “MechPart”, with children classes consisting of the rest of our parts, like legs, cores, left weapons, and right weapons. I would store all of these in an array, and then spawn them in the garage, changing them when the button components are touched. I created a struct that would take all of the selected parts and pass them to the mech upon creation allowing us to begin having customization in the game. This all worked, but frankly was sort of janky, and it wouldn’t have been real easy for the designers to implement new parts. 

We also tried to work on making sure all of our parts fit together, and to do so I had the art team build some simple placeholder assets for me to test with. Implementing them broke a lot of things, but it’s a good starting point for testing all of that.

I decided to refactor the garage system, which sucked because I did lose some progress, but ultimately I think it’s for the best. Instead of storing everything in a class, I switched to using a data table, which was a previously unknown feature to me, to store all of our parts. This allowed me to store all of our parts using only one struct, and make it easier for designers to add and remove parts, as well as making what we can do with the parts more expansive. It’s a lot of reworking things but it’s for the better. Plus, some of the functionality enables me to make some other systems have a far better implementation. 
