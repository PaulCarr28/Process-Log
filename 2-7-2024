Since January, I’ve continued working on a number of refactors to make our code more suited for the type of gameplay we are expecting. My primary angle for making these changes was the way our shooting worked. While basic shooting functionality was in, it was nowhere near where it needed to be. Before, we were shooting one stream of bullets from a fairly arbitrary place on the mech. Seeing as we want to have customizability in our weapon choice and that different weapons will shoot in different ways from different locations, a substantial refactor was in order. 

First order of business was our targeting system. Before, we were obtaining one list of targets using a sphere trace and just turning to shoot at it. Issue with this system is that we plan for different weapons having different ranges which they can attack enemies from, so we need to check which targets are available for each individual weapon. My primary concern was that if we continued drawing sphere traces and checking what appeared within them, replicated across several mechs we would start to take a hit to performance. The solution was to stop drawing sphere traces, and instead each mech would register with the game mode upon creation. We then use simple math to determine our distance from each target, and if they are a weapon’s range then that weapon adds it to a “master” list and a “personal” list of targets. The master list controls what the general target of the mech is, whereas the personal lists are to determine if the mech can actually fire at the target using that weapon. 

After that, I did some miscellaneous work, such as adding in a button that allows us to go back to level selection after being pressed three times (fairly trivial stuff like that). 

My biggest concern right now is taking another look at our attack system. I’m currently dissatisfied with the way fire rate and shooting is handled, as we sort of tie everything to how often we check for targets, which leads to some really unclean looking movement among other things in our mechs. I’d like to decouple our fire rate alongside a few other behaviors from our Check for Targets function just to make things run a little more smoothly. The challenge here is finding when to properly activate and deactivate certain behaviors in a clean manner. 

At the same time, I recognize that I’ve been refactoring code for a little too long now, and need to eventually move on to other important features (predictive aiming, stat implementation, different weapon types, etc.) so I need to figure out how to balance the two in order to actually move the project forwards. Perhaps switching between adding functionality and refactoring old features in little bits would be a beneficial way to approach this problem.  
